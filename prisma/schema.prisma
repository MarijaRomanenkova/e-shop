generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  tasks       Task[]
}

model TaskStatus {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String           @unique
  description String?
  color       String?
  order       Int             // for controlling display order
  createdAt   DateTime        @default(now()) @db.Timestamp(6)
  updatedAt   DateTime        @updatedAt
  tasks       Task[]
  assignments TaskAssignment[]
}

model Task {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String    @unique(map: "task_slug_idx")
  categoryId  String    @db.Uuid
  images      String[]
  description String
  price       Decimal   @db.Decimal(12, 2)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  statusId    String    @db.Uuid
  
  createdById String?   @db.Uuid
  createdBy   User?     @relation("UserTasks", fields: [createdById], references: [id])

  category    Category  @relation(fields: [categoryId], references: [id])
  status      TaskStatus @relation(fields: [statusId], references: [id])
  assignments TaskAssignment[]
  invoiceItems InvoiceItem[]
  conversations Conversation[]

  @@index([createdById])
}

model TaskAssignment {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId       String      @db.Uuid
  clientId     String      @db.Uuid
  contractorId String      @db.Uuid
  statusId     String      @db.Uuid
  status       TaskStatus  @relation(fields: [statusId], references: [id])
  createdAt    DateTime    @default(now()) @db.Timestamp(6)
  completedAt  DateTime?   @db.Timestamp(6)
  task         Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  client       User        @relation("ClientAssignments", fields: [clientId], references: [id])
  contractor   User        @relation("ContractorAssignments", fields: [contractorId], references: [id])
  reviews      Review[]
  invoiceItems InvoiceItem[]
}

model ReviewType {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  reviews     Review[]
}

model Review {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assignmentId String        @db.Uuid
  reviewerId   String        @db.Uuid
  revieweeId   String        @db.Uuid
  rating       Int
  title        String
  description  String
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  assignment   TaskAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  reviewer     User          @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewee     User          @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  typeId       String        @db.Uuid
  reviewType   ReviewType    @relation(fields: [typeId], references: [id])
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  fullName      String?
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  phoneNumber   String?
  companyId     String?   // Contractor legal ID number
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  Cart          Cart[]
  numReviews    Int         @default(0)
  clientRating      Decimal     @default(0) @db.Decimal(3, 2)
  contractorRating  Decimal     @default(0) @db.Decimal(3, 2)
  reviewsGiven          Review[] @relation("ReviewsGiven")
  reviewsReceived       Review[] @relation("ReviewsReceived")
  clientAssignments      TaskAssignment[] @relation("ClientAssignments")
  contractorAssignments  TaskAssignment[] @relation("ContractorAssignments")
  clientInvoices       Invoice[] @relation("ClientInvoices")
  contractorInvoices   Invoice[] @relation("ContractorInvoices")
  payments         Payment[]
  tasks Task[] @relation("UserTasks")
  conversations ConversationParticipant[]
  messages      Message[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?   @db.Uuid
  sessionCartId String
  invoices      Invoice[] @relation("CartInvoices")
  totalPrice    Decimal   @db.Decimal(12, 2)
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String    @db.Uuid
  user            User      @relation(fields: [userId], references: [id])
  amount          Decimal   @db.Decimal(12, 2)
  paymentMethod   String
  paymentResult   Json      @db.Json
  isPaid          Boolean   @default(false)
  paidAt          DateTime? @db.Timestamp(6)
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  invoices        Invoice[]
  emailSent       Boolean   @default(false)  
  emailSentAt     DateTime? @db.Timestamp(6) 
}

model Invoice {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceNumber   String    @unique
  contractorId    String    @db.Uuid
  clientId        String    @db.Uuid
  totalPrice      Decimal   @db.Decimal(12, 2)
  paymentId       String?   @db.Uuid
  payment         Payment?  @relation(fields: [paymentId], references: [id])
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  client          User        @relation("ClientInvoices", fields: [clientId], references: [id])
  contractor      User        @relation("ContractorInvoices", fields: [contractorId], references: [id])
  items           InvoiceItem[]
  cartId          String?    @db.Uuid
  cart            Cart?      @relation("CartInvoices", fields: [cartId], references: [id])
}

model InvoiceItem {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceId     String    @db.Uuid
  taskId        String    @db.Uuid
  assignmentId  String    @db.Uuid
  qty           Int
  price         Decimal   @db.Decimal(12, 2)
  name          String
  hours         Int
  
  invoice       Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  task          Task      @relation(fields: [taskId], references: [id])
  assignment    TaskAssignment @relation(fields: [assignmentId], references: [id])

  @@unique([invoiceId, taskId])
}

model Conversation {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)
  taskId      String?   @db.Uuid
  task        Task?     @relation(fields: [taskId], references: [id])
  
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String       @db.Uuid
  conversationId String       @db.Uuid
  joinedAt       DateTime     @default(now()) @db.Timestamp(6)
  
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  
  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String       @db.Uuid
  senderId       String       @db.Uuid
  content        String
  createdAt      DateTime     @default(now()) @db.Timestamp(6)
  readAt         DateTime?    @db.Timestamp(6)
  
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

